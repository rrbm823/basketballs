logloss(Rating$outcome, pred_s)
logloss(pred_s, pred_s)
pred_s[which(pred_s == 1)] <- pred_s[which(pred_s == 1)] - .000001
pred_s[which(pred_s == 0)] <- pred_s[which(pred_s == 0)] + .000001
logloss(pred_s, pred_s)
logloss(pred_s, Rating$outcome)
logloss(Rating$outcome, pred_s)
View(test)
the_game <- sample_submission_(2)
the_game <- read.csv("sample_submission (2)", stringsAsFactors = F)
the_game <- read.csv("sample_submission (2).csv", stringsAsFactors = F)
the_game
the_game$id
strsplit(the_game$id, "_")
laply(strsplit(the_game$id, "_"), identity)
the_game[,c("season", "team_a", "team_b")] <- laply(strsplit(the_game$id, "_"), identity)
the_Game
the_game
n
svm_test_TR <- read.csv(ordinal_ranks_season_S)
svm_test_TR <- read.csv("ordinal_ranks_season_S.csv", stringsAsFactors = F)
svm_test_TR
a[[15]] <- svm_test_TR
getRankSet <- function(season, team){
out <- matrix(NA, 1, 33)
out <- as.data.frame(out)
names(out) <- unique(a[[15]]$sys_name)
if(length(intersect(which(a[[15]]$season == season), which(a[[15]]$team == team))) == 0) return(out)
team_ranks <- aggregate(orank ~ sys_name,
data = a[[15]][intersect(which(a[[15]]$season == season), which(a[[15]]$team == team)),],
FUN = mean,
na.rm = T)
for(i in names(out)){
if(length(team_ranks$orank[which(team_ranks$sys_name == i)]) > 0) out[,i] <- team_ranks[which(team_ranks$sys_name == i), "orank"]
}
out
}
getRankSet("S", 534)
names(out)
unique(a[[15]]$sys_name)
getRankSet <- function(season, team){
out <- matrix(NA, 1, 33)
out <- as.data.frame(out)
names(out) <- unique(a[[15]]$sys_name)[which(unique(a[[15]]$sys_name)%in%unique(ordinal_ranks_core_33$sys_name))]
if(length(intersect(which(a[[15]]$season == season), which(a[[15]]$team == team))) == 0) return(out)
team_ranks <- aggregate(orank ~ sys_name,
data = a[[15]][intersect(which(a[[15]]$season == season), which(a[[15]]$team == team)),],
FUN = mean,
na.rm = T)
for(i in names(out)){
if(length(team_ranks$orank[which(team_ranks$sys_name == i)]) > 0) out[,i] <- team_ranks[which(team_ranks$sys_name == i), "orank"]
}
out
}
getRankSet("S", 534)
cl <- createCluster(4, export = list("getSAGP", "getRankSet", "a", "ordinal_ranks_core_33", "the_game"))
t <- as.data.frame(laply(444:(nrow(the_game)), function(i){
team_b <- unlist(strsplit(the_game$id[i], "_"))[3]
getRankSet(the_game$season[i], team_b)
}, .parallel = TRUE))
s <- as.data.frame(laply(444:(nrow(the_game)), function(i){
team_a <- unlist(strsplit(the_game$id[i], "_"))[2]
getRankSet(the_game$season[i], team_a)
}, .parallel = TRUE))
save.image()
summary(t)
summary(as.numeric(t))
for(i in 1:ncol(t)) t[,i] <- as.numeric(t[,i])
summary(t)
for(i in 1:ncol(s)) s[,i] <- as.numeric(s[,i])
summary(s)
Rating_t = 100 - 4*log(t+1) - t/22
Rating_s = 100 - 4*log(s+1) - s/22
summary(Rating_s)
ncol(Rating_s)
the_game[,6:37] <- Rating_s
t <- as.data.frame(laply(1:(nrow(the_game)), function(i){
team_b <- unlist(strsplit(the_game$id[i], "_"))[3]
getRankSet(the_game$season[i], team_b)
}, .parallel = TRUE))
s <- as.data.frame(laply(1:(nrow(the_game)), function(i){
team_a <- unlist(strsplit(the_game$id[i], "_"))[2]
getRankSet(the_game$season[i], team_a)
}, .parallel = TRUE))
summary(t)
for(i in 1:ncol(t)) t[,i] <- as.numeric(t[,i])
for(i in 1:ncol(s)) s[,i] <- as.numeric(s[,i])
summary(t)
the_game[,6:37] <- Rating_s
Rating_t = 100 - 4*log(t+1) - t/22
Rating_s = 100 - 4*log(s+1) - s/22
the_game[,6:37] <- Rating_s
the_game[,6:38] <- Rating_s
the_game[,39:72] <- Rating_t
summary(the_game)
summary(Rating_t)
names(the_game)
names(the_game)[6:31] <- paste(names(the_game[6:31]), "a", sep = "_")
names(the_game)
names(the_game)[32:37] <- paste(names(the_game[32:37]), "a", sep = "_")
names(the_game)
names(the_game)[39:71] <- paste(names(the_game[39:71]), "b", sep = "_")
names(the_game)
names(the_game)[39:71] <- gsub(".1", "", names(the_game[39:71]))
names(the_game)
predict(bbsvm, the_game)
names(svm_train_TR)
union(names(the_game), names(svm_train_TR)) - intersect(names(the_game), names(svm_train_TR))
union(names(the_game), names(svm_train_TR))%notin%intersect(names(the_game), names(svm_train_TR))
!union(names(the_game), names(svm_train_TR))%in%intersect(names(the_game), names(svm_train_TR))
union(names(the_game), names(svm_train_TR))[!union(names(the_game), names(svm_train_TR))%in%intersect(names(the_game), names(svm_train_TR))]
names(svm_train_TR)
grep("MB_|BPI_", names(svm_train_TR))
svm_train_TRdrop <- svm_train_TR[,-grep("MB_|BPI_", names(svm_train_TR))]
nrow(svm_train_TRdrop[complete.cases(svm_train_TRdrop),])
summary(svm_train_TRdrop[!complete.cases(svm_train_TRdrop),])
summary(the_game)
laply(1:nrow(svm_train_TRdrop)), function(i) sum(is.na(svm_train_TRdrop[i,]))
laply(1:nrow(svm_train_TRdrop), function(i) sum(is.na(svm_train_TRdrop[i,]))
)
svm_train_TRdrop <- which(laply(1:nrow(svm_train_TRdrop), function(i) sum(is.na(svm_train_TRdrop[i,])) < 20))
svm_train_TRdrop <- svm_train_TR[,-grep("MB_|BPI_", names(svm_train_TR))]
svm_train_TRdrop <- svm_train_TRdrop[which(laply(1:nrow(svm_train_TRdrop), function(i) sum(is.na(svm_train_TRdrop[i,])) < 20)),]
svm_train_TRdrop[is.na(svm_train_TRdrop),]
is.na(svm_train_TRdrop),
is.na(svm_train_TRdrop)
summary(svm_train_TRdrop)
svm_train_TRdrop2 <- svm_train_TRdrop[,-grep("AP_|RTB_|NOL_|DCI_|LMC_|USA_|DES_", names(svm_train_TRdrop))]
summary(svm_train_TRdrop2)
View(svm_train_TRdrop2)
svm_train_TRdrop2$row.names
View(svm_test_TR)
summary(svm_train_TR)
svm_train_TR$id <- tourney_results$id
summary(svm_train_TR)
View(svm_train_TR)
svm_train_TRdrop <- svm_train_TR[,-grep("MB_|BPI_", names(svm_train_TR))]
svm_train_TRdrop2 <- svm_train_TRdrop[,-grep("AP_|RTB_|NOL_|DCI_|LMC_|USA_|DES_", names(svm_train_TRdrop))]
svm_train_TRdrop2 <- svm_train_TRdrop2[complete.cases(svm_train_TRdrop2),]
svm_train_TRdrop2[,c("season", "team_a", "team_b")] <- laply(strsplit(svm_train_TRdrop2$id, "_"), identity)
View(svm_train_TRdrop2)
names(svm_train_TRdrop2)[50]
?train
library("caret", lib.loc="C:/Users/Dell User/R/win-library/3.0")
save.image()
train(outcome~.,
data = train_prevs[,1:49],
method = "svm",
trControl = trainControl("LGOCV", p = .9)))
bbsvm2 <- train(outcome~.,
data = train_prevs[,1:49],
method = "svm",
trControl = trainControl("LGOCV", p = .9))
bbsvm2 <- train(outcome~.,
data = svm_train_TRdrop2[,1:49],
method = "svm",
trControl = trainControl("LGOCV", p = .9))
bbsvm2 <- train(outcome~.,
data = svm_train_TRdrop2[,1:49],
method = "svmRadial",
trControl = trainControl("LGOCV", p = .9))
?svm
View(actual_tourney_games)
for(letter in c("N", "O", "P", "Q", "R")){
train_prevs <- svm_train_TRdrop2[which(svm_train_TRdrop2$season <= letter),]
model_name <- paste("bbsvm", letter, sep = "_")
assign(model_name,
svm(outcome~.,
data = train_prevs[,1:49], scale = TRUE,
probability = TRUE, fitted = TRUE, seed = 24))
ts_tourney_games <- which(test$id%in%tourney_results[which(tourney_results$season == letter), "id"])
print(ts_tourney_games)
test$pred[ts_tourney_games] <- predict(get(model_name), test[ts_tourney_games,])
print(logloss(actual_tourney_games[which(actual_tourney_games$season == letter, "outcome"], fitted(get(model_name))))
}
letter
for(letter in c("N", "O", "P", "Q", "R")){
train_prevs <- svm_train_TRdrop2[which(svm_train_TRdrop2$season <= letter),]
model_name <- paste("bbsvm", letter, sep = "_")
assign(model_name,
svm(outcome~.,
data = train_prevs[,1:49], scale = TRUE,
probability = TRUE, fitted = TRUE, seed = 24))
ts_tourney_games <- which(test$id%in%tourney_results[which(tourney_results$season == letter), "id"])
print(ts_tourney_games)
test$pred[ts_tourney_games] <- predict(get(model_name), test[ts_tourney_games,])
print(logloss(actual_tourney_games[which(actual_tourney_games$season == letter), "outcome"], fitted(get(model_name))))
}
bbsvm_N
fitted(bbsvm_N)
logloss(actual_tourney_games[which(actual_tourney_games$season == letter), "outcome"], fitted(bbsvm_N))
actual_tourney_games[which(actual_tourney_games$season == letter), "outcome"]
pred <- predict(bbsvm_N, svm_train_TRdrop2)
pred
letter
train_prevs <- svm_train_TRdrop2[which(svm_train_TRdrop2$season < letter),]
model_name <- paste("bbsvm", letter, sep = "_")
assign(model_name,
svm(outcome~.,
data = train_prevs[,1:49], scale = TRUE,
probability = TRUE, fitted = TRUE, seed = 24))
pred <- predict(bbsvm, svm_train_TR)
table(pred, tourney_results$outcome)
table(pred, svm_train_TRdrop2$outcome)
length(pred)
table(pred, train_prevs$outcome)
length(train_prevs$outcome)
pred <- predict(bbsvm, train_prevs[which(train_prevs$season == letter)])
pred <- predict(bbsvm, train_prevs[which(train_prevs$season == letter),])
pred <- predict(bbsvm_N, train_prevs[which(train_prevs$season == letter),])
table(pred, train_prevs$outcome)
length(pred)
pred <- predict(bbsvm_N, svm_train_TRdrop2[which(svm_train_TRdrop2$season == letter),])
length(pred)
table(pred, train_prevs$outcome)
pred_s <- (pred - min(pred)) / (max(pred) - min(pred))
pred_s[which(pred_s == 0)] <- pred_s[which(pred_s == 0)] + .000001
pred_s[which(pred_s == 1)] <- pred_s[which(pred_s == 1)] - .000001
logloss(train_prevs$outcome, pred_s)
print(logloss(svm_train_TRdrop2[which(svm_train_TRdrop2$season == letter), "outcome"], pred_s)))
print(logloss(svm_train_TRdrop2[which(svm_train_TRdrop2$season == letter), "outcome"], pred_s))
for(letter in c("N", "O", "P", "Q", "R")){
train_prevs <- svm_train_TRdrop2[which(svm_train_TRdrop2$season < letter),]
model_name <- paste("bbsvm", letter, sep = "_")
assign(model_name,
svm(outcome~.,
data = train_prevs[,1:49], scale = TRUE,
for(letter in c("N", "O", "P", "Q", "R")){
train_prevs <- svm_train_TRdrop2[which(svm_train_TRdrop2$season < letter),]
model_name <- paste("bbsvm", letter, sep = "_")
assign(model_name,
svm(outcome~.,
data = train_prevs[,1:49], scale = TRUE,
probability = TRUE, fitted = TRUE, seed = 24))
ts_tourney_games <- which(test$id%in%tourney_results[which(tourney_results$season == letter), "id"])
print(ts_tourney_games)
pred <- predict(get(model_name), svm_train_TRdrop2[which(svm_train_TRdrop2$season == letter),])
pred_s <- (pred - min(pred)) / (max(pred) - min(pred))
pred_s[which(pred_s == 0)] <- pred_s[which(pred_s == 0)] + .000001
pred_s[which(pred_s == 1)] <- pred_s[which(pred_s == 1)] - .000001
test$pred[ts_tourney_games] <- pred_s
print(logloss(svm_train_TRdrop2[which(svm_train_TRdrop2$season == letter), "outcome"], pred_s)))
}
for(letter in c("N", "O", "P", "Q", "R")){
train_prevs <- svm_train_TRdrop2[which(svm_train_TRdrop2$season < letter),]
model_name <- paste("bbsvm", letter, sep = "_")
assign(model_name,
svm(outcome~.,
data = train_prevs[,1:49], scale = TRUE,
probability = TRUE, fitted = TRUE, seed = 24))
ts_tourney_games <- which(test$id%in%tourney_results[which(tourney_results$season == letter), "id"])
print(ts_tourney_games)
pred <- predict(get(model_name), svm_train_TRdrop2[which(svm_train_TRdrop2$season == letter),])
pred_s <- (pred - min(pred)) / (max(pred) - min(pred))
pred_s[which(pred_s == 0)] <- pred_s[which(pred_s == 0)] + .000001
pred_s[which(pred_s == 1)] <- pred_s[which(pred_s == 1)] - .000001
test$pred[ts_tourney_games] <- pred_s
print(logloss(svm_train_TRdrop2[which(svm_train_TRdrop2$season == letter), "outcome"], pred_s))
}
for(letter in c("N", "O", "P", "Q", "R")){
train_prevs <- svm_train_TRdrop2[which(svm_train_TRdrop2$season < letter),]
model_name <- paste("bbsvm", letter, sep = "_")
assign(model_name,
svm(outcome~.,
data = train_prevs[,1:49], scale = TRUE,
gamma = 1/25, epsilon = 0.1, cross = 5,
probability = TRUE, fitted = TRUE, seed = 24))
ts_tourney_games <- which(test$id%in%tourney_results[which(tourney_results$season == letter), "id"])
print(ts_tourney_games)
pred <- predict(get(model_name), svm_train_TRdrop2[which(svm_train_TRdrop2$season == letter),])
pred_s <- (pred - min(pred)) / (max(pred) - min(pred))
pred_s[which(pred_s == 0)] <- pred_s[which(pred_s == 0)] + .000001
pred_s[which(pred_s == 1)] <- pred_s[which(pred_s == 1)] - .000001
test$pred[ts_tourney_games] <- pred_s
print(logloss(svm_train_TRdrop2[which(svm_train_TRdrop2$season == letter), "outcome"], pred_s))
}
for(letter in c("N", "O", "P", "Q", "R")){
train_prevs <- svm_train_TRdrop2[which(svm_train_TRdrop2$season < letter),]
model_name <- paste("bbsvm", letter, sep = "_")
assign(model_name,
svm(outcome~.,
data = train_prevs[,1:49], scale = TRUE,
gamma = 1/25, epsilon = 0.05, cross = 5,
probability = TRUE, fitted = TRUE, seed = 24))
ts_tourney_games <- which(test$id%in%tourney_results[which(tourney_results$season == letter), "id"])
print(ts_tourney_games)
pred <- predict(get(model_name), svm_train_TRdrop2[which(svm_train_TRdrop2$season == letter),])
pred_s <- (pred - min(pred)) / (max(pred) - min(pred))
pred_s[which(pred_s == 0)] <- pred_s[which(pred_s == 0)] + .000001
pred_s[which(pred_s == 1)] <- pred_s[which(pred_s == 1)] - .000001
test$pred[ts_tourney_games] <- pred_s
print(logloss(svm_train_TRdrop2[which(svm_train_TRdrop2$season == letter), "outcome"], pred_s))
}
for(letter in c("N", "O", "P", "Q", "R")){
train_prevs <- svm_train_TRdrop2[which(svm_train_TRdrop2$season < letter),]
model_name <- paste("bbsvm", letter, sep = "_")
assign(model_name,
svm(outcome~.,
data = train_prevs[,1:49], scale = TRUE,
gamma = 1/25, epsilon = 0.02, cross = 5,
probability = TRUE, fitted = TRUE, seed = 24))
ts_tourney_games <- which(test$id%in%tourney_results[which(tourney_results$season == letter), "id"])
print(ts_tourney_games)
pred <- predict(get(model_name), svm_train_TRdrop2[which(svm_train_TRdrop2$season == letter),])
pred_s <- (pred - min(pred)) / (max(pred) - min(pred))
pred_s[which(pred_s == 0)] <- pred_s[which(pred_s == 0)] + .000001
pred_s[which(pred_s == 1)] <- pred_s[which(pred_s == 1)] - .000001
test$pred[ts_tourney_games] <- pred_s
print(logloss(svm_train_TRdrop2[which(svm_train_TRdrop2$season == letter), "outcome"], pred_s))
}
for(letter in c("N", "O", "P", "Q", "R")){
train_prevs <- svm_train_TRdrop2[which(svm_train_TRdrop2$season < letter),]
model_name <- paste("bbsvm", letter, sep = "_")
assign(model_name,
svm(outcome~.,
data = train_prevs[,1:49], scale = TRUE,
gamma = 1/50, epsilon = 0.02, cross = 5,
probability = TRUE, fitted = TRUE, seed = 24))
ts_tourney_games <- which(test$id%in%tourney_results[which(tourney_results$season == letter), "id"])
print(ts_tourney_games)
pred <- predict(get(model_name), svm_train_TRdrop2[which(svm_train_TRdrop2$season == letter),])
pred_s <- (pred - min(pred)) / (max(pred) - min(pred))
pred_s[which(pred_s == 0)] <- pred_s[which(pred_s == 0)] + .000001
pred_s[which(pred_s == 1)] <- pred_s[which(pred_s == 1)] - .000001
test$pred[ts_tourney_games] <- pred_s
print(logloss(svm_train_TRdrop2[which(svm_train_TRdrop2$season == letter), "outcome"], pred_s))
}
for(letter in c("N", "O", "P", "Q", "R")){
train_prevs <- svm_train_TRdrop2[which(svm_train_TRdrop2$season < letter),]
model_name <- paste("bbsvm", letter, sep = "_")
assign(model_name,
svm(outcome~.,
data = train_prevs[,1:49], scale = TRUE,
gamma = 1/33, epsilon = 0.01, cross = 5,
probability = TRUE, fitted = TRUE, seed = 24))
ts_tourney_games <- which(test$id%in%tourney_results[which(tourney_results$season == letter), "id"])
print(ts_tourney_games)
pred <- predict(get(model_name), svm_train_TRdrop2[which(svm_train_TRdrop2$season == letter),])
pred_s <- (pred - min(pred)) / (max(pred) - min(pred))
pred_s[which(pred_s == 0)] <- pred_s[which(pred_s == 0)] + .000001
pred_s[which(pred_s == 1)] <- pred_s[which(pred_s == 1)] - .000001
test$pred[ts_tourney_games] <- pred_s
print(logloss(svm_train_TRdrop2[which(svm_train_TRdrop2$season == letter), "outcome"], pred_s))
}
for(letter in c("N", "O", "P", "Q", "R", "S")){
train_prevs <- svm_train_TRdrop2[which(svm_train_TRdrop2$season < letter),]
model_name <- paste("bbsvm", letter, sep = "_")
assign(model_name,
svm(outcome~.,
data = train_prevs[,1:49], scale = TRUE,
gamma = 1/33, epsilon = 0.01, cross = 5,
probability = TRUE, fitted = TRUE, seed = 24))
ts_tourney_games <- which(test$id%in%tourney_results[which(tourney_results$season == letter), "id"])
print(ts_tourney_games)
pred <- predict(get(model_name), svm_train_TRdrop2[which(svm_train_TRdrop2$season == letter),])
pred_s <- (pred - min(pred)) / (max(pred) - min(pred))
pred_s[which(pred_s == 0)] <- pred_s[which(pred_s == 0)] + .000001
pred_s[which(pred_s == 1)] <- pred_s[which(pred_s == 1)] - .000001
test$pred[ts_tourney_games] <- pred_s
print(logloss(svm_train_TRdrop2[which(svm_train_TRdrop2$season == letter), "outcome"], pred_s))
}
bbsvm_S
pred <- predict(bbsvm_S, the_game)
pred
?predict.sv
?predict.svm
View(the_game)
pred <- predict(bbsvm_S, newdata = the_game)
pred
pred <- predict(bbsvm_S, newdata = the_game, decision.values)
pred <- predict(bbsvm_S, newdata = the_game, decision.values = T)
pred <- predict(bbsvm_S, newdata = the_game, probability = T)
pred
train_prevs <- svm_train_TRdrop2[which(svm_train_TRdrop2$season < "S"),]
train_prevs
svm_train_TRdrop2[,49]
names(svm_train_TRdrop2)[49]
100 - 4*log(svm_train_TRdrop2[,2:49]+1) - svm_train_TRdrop2[,2:49]/22
svm_train_TRdrop2[,2:49] <- 100 - 4*log(svm_train_TRdrop2[,2:49]+1) - svm_train_TRdrop2[,2:49]/22
bbsvm_S <- svm(outcome~.,
data = svm_train_TRdrop2[,1:49], scale = TRUE,
gamma = 1/33, epsilon = 0.01, cross = 5,
probability = TRUE, fitted = TRUE, seed = 24))
bbsvm_S <- svm(outcome~.,
data = svm_train_TRdrop2[,1:49], scale = TRUE,
gamma = 1/33, epsilon = 0.01, cross = 5,
probability = TRUE, fitted = TRUE, seed = 24)
bbsvm_S
pred <- predict(bbsvm_S, newdata = the_game, probability = T)
pred
which(is.na(the_game), arr.ind = T)
summary(the_game)
summary(svm_train_TRdrop2)
intersect(names(svm_train_TRdrop2), names(the_game))
the_game[,intersect(names(svm_train_TRdrop2), names(the_game))]
the_game <- the_game[,intersect(names(svm_train_TRdrop2), names(the_game))]
pred <- predict(bbsvm_S, newdata = the_game, probability = T)
pred
pred_s <- (pred - min(pred)) / (max(pred) - min(pred))
pred_s[which(pred_s == 0)] <- pred_s[which(pred_s == 0)] + .001
pred_s[which(pred_s == 1)] <- pred_s[which(pred_s == 1)] - .001
pred_s
the_game2$pred <- pred_s
the_game$pred <- pred_s
View(the_game)
get.team
n
the_game$name_a <- laply(the_game$team_a, function(i) get.team(i))
the_game$name_a
get.team <- function(team) {
if(is.na(as.integer(team))){
a[[6]]$id[which(a[[6]]$team == team)]
} else a[[6]]$team[which(a[[6]]$id == team)]
}
the_game$name_a <- laply(the_game$team_a, function(i) get.team(i))
get.team(794)
which(a[[6]]$id == 794)
a[[6]]$team[which(a[[6]]$id == 794)]
n
get.team <- function(team) {
if(is.na(as.integer(team))){
a[[6]]$id[which(a[[6]]$team == team)]
} else a[[6]]$name[which(a[[6]]$id == team)]
}
the_game$name_a <- laply(the_game$team_a, function(i) get.team(i))
the_game$name_a
the_game$name_b <- laply(the_game$team_b, function(i) get.team(i))
write.csv(the_game, "the_game.csv", row.names = F)
bbglm_R
the_game$SAG_a
the_game[,c("SAG_a", "SAG_b")]
names(bbglm_R)
bbglm5
bbglm_R
summary(bbglm5)
summary(bbglm_R)
bbglm5$call
bbglm4$call
bbglm2$call
the_game$sag_a <- the_game$SAG_a
the_game$sag_b <- the_game$SAG_b
predict(bbglm5, the_game)
center(the_game$sag_a)
scale(the_game$sag_a)
?scale
scale
(the_game[which(!is.na(the_game$sag_a)), "sag_a"] - mean(the_game[which(!is.na(the_game$sag_a)), "sag_a"]))/(2*sd(the_game[which(!is.na(the_game$sag_a)), "sag_a"]))
(the_game[which(!is.na(the_game$sag_a)), "sag_a"] - mean(the_game[which(!is.na(the_game$sag_a)), "sag_a"]))/(2*sd(the_game[which(!is.na(the_game$sag_a)), "sag_a"])) == scale(the_game$sag_a)
(the_game[which(!is.na(the_game$sag_a)), "sag_a"] - mean(the_game[which(!is.na(the_game$sag_a)), "sag_a"]))/(2*sd(the_game[which(!is.na(the_game$sag_a)), "sag_a"])) - scale(the_game$sag_a)
summary(scale(the_game$sag_a))
summary(the_game[which(!is.na(the_game$sag_a)), "sag_a"] - mean(the_game[which(!is.na(the_game$sag_a)), "sag_a"]))/(2*sd(the_game[which(!is.na(the_game$sag_a)), "sag_a"])))
summary((the_game[which(!is.na(the_game$sag_a)), "sag_a"] - mean(the_game[which(!is.na(the_game$sag_a)), "sag_a"]))/(2*sd(the_game[which(!is.na(the_game$sag_a)), "sag_a"])))
sd((the_game[which(!is.na(the_game$sag_a)), "sag_a"] - mean(the_game[which(!is.na(the_game$sag_a)), "sag_a"]))/(2*sd(the_game[which(!is.na(the_game$sag_a)), "sag_a"]))
)
(the_game[which(!is.na(the_game$sag_a)), "sag_a"] - mean(the_game[which(!is.na(the_game$sag_a)), "sag_a"]))/(sd(the_game[which(!is.na(the_game$sag_a)), "sag_a"])) == scale(the_game$sag_a)
the_game[which(!is.na(the_game$sag_a)),"sag_a_scl"] <- (the_game[which(!is.na(the_game$sag_a)), "sag_a"] - mean(the_game[which(!is.na(the_game$sag_a)), "sag_a"]))/(2*sd(the_game[which(!is.na(the_game$sag_a)), "sag_a"]))
the_game$sag_a
the_game[which(!is.na(the_game$sag_a)),"sag_a"] <- (the_game[which(!is.na(the_game$sag_a)), "sag_a"] - mean(the_game[which(!is.na(the_game$sag_a)), "sag_a"]))/(2*sd(the_game[which(!is.na(the_game$sag_a)), "sag_a"]))
the_game[,"sag_a_scl"]
the_game[,-ncol(the_game)]
the_game[which(!is.na(the_game$sag_b)),"sag_b"] <- (the_game[which(!is.na(the_game$sag_b)), "sag_b"] - mean(the_game[which(!is.na(the_game$sag_b)), "sag_b"]))/(2*sd(the_game[which(!is.na(the_game$sag_b)), "sag_b"]))
predict(bbglm5, the_game)
preg_g <- predict(bbglm5, the_game)
pred_s
pred_s - pred_g
pred_g <- predict(bbglm5, the_game)
rm(pred_g)
pred_s - pred_g
pred_g <- predict(bbglm5, the_game)
rm(pred_g)
rm(preg_g)
pred_g <- predict(bbglm5, the_game)
pred_s - pred_g
hist(pred_s - pred_g)
plot(pred_s, pred_g)
the_game
head(the_game)
bbsvm
Rating
head(Rating)
bbsvm_R
bbsvm_S
head(svm_train_TRdrop2[,1:49])
head(tourney_results)
tourney_results[444:nrow(tourney_results),53:85] <- t
warnings
warnings()
pred_s = 1 - pred_s
plot(pred_s, pred_g)
hist(pred_s, pred_g)
hist(pred_s - pred_g)
which(abs(pred_s - pred_g) > .35
)
the_game(which(abs(pred_s - pred_g) > .35))
the_game[which(abs(pred_s - pred_g) > .35),]
the_game$pred = 1 - the_game$pred
the_game[,58]
the_game[,59]
the_game[,-58]
the_game <- the_game[,-58]
names(the_game)
names(the_game)[54]
names(the_game)[53] <- "pred_s"
the_game$pred_g <- pred_g
head(the_Game)
head(the_game)
write.csv(the_game, "the_game.csv", row.names = F)
write.csv(the_game, "the_game.csv", row.names = F)
read.csv("/predictions/pred_1.csv")
read.csv("./predictions/pred_1.csv", row.names = F)
read.csv("./predictions/pred_1.csv")
plot(read.csv("./predictions/pred_1.csv")$pred, read.csv("./predictions/pred_2.csv")$pred)
